"""Change birth_date to date type

Revision ID: 7e2655e96046
Revises: 043bb2a824b8
Create Date: 2025-10-06 23:32:24.851897

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import sqlmodel
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '7e2655e96046'
down_revision: Union[str, Sequence[str], None] = '043bb2a824b8'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('jwt_blacklist')
    op.drop_index(op.f('ix_reset_password_created_at'), table_name='reset_password')
    op.drop_index(op.f('ix_reset_password_email'), table_name='reset_password')
    op.drop_index(op.f('ix_reset_password_employee_id'), table_name='reset_password')
    op.drop_index(op.f('ix_reset_password_status'), table_name='reset_password')
    op.drop_index(op.f('ix_reset_password_token'), table_name='reset_password')
    op.drop_table('reset_password')
    op.drop_index(op.f('ix_employee_roles_employee_id'), table_name='employee_roles')
    op.drop_index(op.f('ix_employee_roles_role'), table_name='employee_roles')
    op.drop_table('employee_roles')
    op.drop_index(op.f('ix_errors_created_at'), table_name='errors')
    op.drop_index(op.f('ix_errors_text'), table_name='errors')
    op.drop_table('errors')
    op.drop_index(op.f('ix_account_activation_created_at'), table_name='account_activation')
    op.drop_index(op.f('ix_account_activation_employee_id'), table_name='account_activation')
    op.drop_index(op.f('ix_account_activation_status'), table_name='account_activation')
    op.drop_index(op.f('ix_account_activation_token'), table_name='account_activation')
    op.drop_table('account_activation')
    op.drop_index(op.f('ix_employees_address'), table_name='employees')
    op.drop_index(op.f('ix_employees_birth_date'), table_name='employees')
    op.drop_index(op.f('ix_employees_cnss_number'), table_name='employees')
    op.drop_index(op.f('ix_employees_contract_type'), table_name='employees')
    op.drop_index(op.f('ix_employees_created_at'), table_name='employees')
    op.drop_index(op.f('ix_employees_email'), table_name='employees')
    op.drop_index(op.f('ix_employees_first_name'), table_name='employees')
    op.drop_index(op.f('ix_employees_gender'), table_name='employees')
    op.drop_index(op.f('ix_employees_last_name'), table_name='employees')
    op.drop_index(op.f('ix_employees_number'), table_name='employees')
    op.drop_index(op.f('ix_employees_password'), table_name='employees')
    op.drop_index(op.f('ix_employees_phone_number'), table_name='employees')
    op.drop_table('employees')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('employees',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('employees_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('first_name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('last_name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('email', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('password', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('number', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('birth_date', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('address', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('cnss_number', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('contract_type', postgresql.ENUM('Cdi', 'Cdd', 'Sivp', 'Apprenti', name='contracttype'), autoincrement=False, nullable=False),
    sa.Column('gender', postgresql.ENUM('Male', 'Female', name='gender'), autoincrement=False, nullable=False),
    sa.Column('account_status', postgresql.ENUM('active', 'inactive', name='accountstatus'), autoincrement=False, nullable=False),
    sa.Column('phone_number', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.CheckConstraint("contract_type = ANY (ARRAY['Cdi'::contracttype, 'Cdd'::contracttype])) AND cnss_number IS NOT NULL AND cnss_number::text ~ '^\\d{8}-\\d{2}$'::text OR (contract_type = ANY (ARRAY['Sivp'::contracttype, 'Apprenti'::contracttype])) AND (cnss_number IS NULL OR cnss_number::text ~ '^\\d{8}-\\d{2}$'::text", name='ck_employees_valid_cnss_number'),
    sa.PrimaryKeyConstraint('id', name='employees_pkey'),
    sa.UniqueConstraint('email', name='employees_email_key', postgresql_include=[], postgresql_nulls_not_distinct=False),
    postgresql_ignore_search_path=False
    )
    op.create_index(op.f('ix_employees_phone_number'), 'employees', ['phone_number'], unique=False)
    op.create_index(op.f('ix_employees_password'), 'employees', ['password'], unique=False)
    op.create_index(op.f('ix_employees_number'), 'employees', ['number'], unique=False)
    op.create_index(op.f('ix_employees_last_name'), 'employees', ['last_name'], unique=False)
    op.create_index(op.f('ix_employees_gender'), 'employees', ['gender'], unique=False)
    op.create_index(op.f('ix_employees_first_name'), 'employees', ['first_name'], unique=False)
    op.create_index(op.f('ix_employees_email'), 'employees', ['email'], unique=True)
    op.create_index(op.f('ix_employees_created_at'), 'employees', ['created_at'], unique=False)
    op.create_index(op.f('ix_employees_contract_type'), 'employees', ['contract_type'], unique=False)
    op.create_index(op.f('ix_employees_cnss_number'), 'employees', ['cnss_number'], unique=False)
    op.create_index(op.f('ix_employees_birth_date'), 'employees', ['birth_date'], unique=False)
    op.create_index(op.f('ix_employees_address'), 'employees', ['address'], unique=False)
    op.create_table('account_activation',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('employee_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('token', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('status', postgresql.ENUM('Used', 'Pending', name='tokenstatus'), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('account_activation_pkey'))
    )
    op.create_index(op.f('ix_account_activation_token'), 'account_activation', ['token'], unique=True)
    op.create_index(op.f('ix_account_activation_status'), 'account_activation', ['status'], unique=False)
    op.create_index(op.f('ix_account_activation_employee_id'), 'account_activation', ['employee_id'], unique=False)
    op.create_index(op.f('ix_account_activation_created_at'), 'account_activation', ['created_at'], unique=False)
    op.create_table('errors',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('text', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('errors_pkey'))
    )
    op.create_index(op.f('ix_errors_text'), 'errors', ['text'], unique=False)
    op.create_index(op.f('ix_errors_created_at'), 'errors', ['created_at'], unique=False)
    op.create_table('employee_roles',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('employee_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('role', postgresql.ENUM('ADMIN', 'InventoryManager', 'Superuser', 'Vendor', 'Admin', name='roletype'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['employee_id'], ['employees.id'], name=op.f('employee_roles_employee_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('employee_roles_pkey'))
    )
    op.create_index(op.f('ix_employee_roles_role'), 'employee_roles', ['role'], unique=False)
    op.create_index(op.f('ix_employee_roles_employee_id'), 'employee_roles', ['employee_id'], unique=False)
    op.create_table('reset_password',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('employee_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('email', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('token', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('status', postgresql.ENUM('Used', 'Pending', name='tokenstatus'), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('reset_password_pkey'))
    )
    op.create_index(op.f('ix_reset_password_token'), 'reset_password', ['token'], unique=True)
    op.create_index(op.f('ix_reset_password_status'), 'reset_password', ['status'], unique=False)
    op.create_index(op.f('ix_reset_password_employee_id'), 'reset_password', ['employee_id'], unique=False)
    op.create_index(op.f('ix_reset_password_email'), 'reset_password', ['email'], unique=True)
    op.create_index(op.f('ix_reset_password_created_at'), 'reset_password', ['created_at'], unique=False)
    op.create_table('jwt_blacklist',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('token', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('jwt_blacklist_pkey'))
    )
    # ### end Alembic commands ###
